const http = require('http');
const debug = require('debug')('canevas:server');
const dotenv = require('dotenv').config({path: __dirname + '/../config.env'});
const mongoose = require('mongoose');
const sessionManager = require('./../utils/sessionManager')
const app = require('./../app');

// UNCAUGHT EXCPETIONS. mostlfy for sporadic errors
process.on('uncaughtException', (err)=>{
    console.log('UNHANDLED EXCEPTION! ðŸ’¥ðŸ’¥ðŸ’¥ Shutting down...');
    console.log(err.name, err.message);
    process.exit(1);
});

// Database connection
const DB = process.env.DATABASE.replace('<PASSWORD>', process.env.DATABASE_PASSWORD);

// mongoose.connect(DB, {
    mongoose.connect(DB, {}).then(() => console.log('Database connection successful'));

// Get port from enveronment and store in express
const port = normalizePort(process.env.BACKEND_URL || 4000);
app.set('port', port);

// create HTTP server
const server = http.createServer(app);

// Listen on provided port on all network interfaces
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Unhandled Rejections mostly for promises errors
process.on('unhandledRejection', (err)=>{
    console.log('UNHANDLED REJECTION! ðŸ’¥ðŸ’¥ðŸ’¥ Shutting down...');
    console.log(err.name, err.message);
    server.close(()=>{
        process.exit(1);
    });
});

// Normalize a port into a number string or false
function normalizePort(val){
    const port = parseInt(val, 10);

    if(isNaN(port)){
        // named pipe
        return val;
    }

    if(port >= 0){
        // port number
        return port;
    }
    return false
}

// Event listener for HTTP server 'error' event
function onError(error){
    if(error.syscal !== 'listen'){
        throw error;
    }

    const bind = typeof port === 'string' ? 'pipe' + port : 'port' + port;

    // handle specific listen errors with friendly message
    switch(error.code){
        case 'EACCES':
            console.error(bind + 'requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + 'is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

//  Event listener for HTTP server 'listening' event
function onListening(){
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe' + addr : 'port' + addr.port;

    // debug('listening on %o' , bind);
    console.log('Listening on %o ', bind);
}